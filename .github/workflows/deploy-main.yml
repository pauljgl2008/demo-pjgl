on:
  push:
    branches:
      - main

name: Deploy to Amazon ECS branch main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean package

      - name: Configure AWS credentials for US-EAST-1
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: h1m8m7v8
          REPOSITORY: demo-pjgl-repository
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URL=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: paas/task-definition.json
          container-name: demo-pjgl-container
          image: ${{ env.IMAGE_URL }}

      # Verificar si el servicio existe
      - name: Check if service exists
        id: service-exists
        run: |
          echo "Checking if service exists..."
          service_name="demo-pjgl-latest-service"
          service_exists=$(aws ecs describe-services --cluster demo-cluster-pjgl-v6 --services $service_name --query 'services' --output text)
          if [ -z "$service_exists" ]; then
            echo "Service does not exist."
            echo "::set-output name=service-exists::false"
          else
            echo "Service already exists."
            echo "::set-output name=service-exists::true"
          fi

      # Crear el servicio si no existe
      - name: Create service if it does not exist
        if: steps.service-exists.outputs.service-exists == 'false'
        run: |
          echo "Creating service..."
          aws ecs create-service --cluster demo-cluster-pjgl-v6 --service-name demo-pjgl-latest-service --task-definition paas/task-definition.json --desired-count 1 --launch-type EC2
          echo "Service created successfully."

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: demo-pjgl-latest-service
          cluster: demo-cluster-pjgl-v6
          wait-for-service-stability: false
